{"version":3,"file":"vue-better-sync.min.js","sources":["../src/utils/camel-case.js","../src/utils/is-function.js","../src/index.js","../src/utils/is-object.js"],"sourcesContent":["const cache = Object.create(null)\r\n\r\nexport default word => {\r\n  if (!cache[word]) {\r\n    cache[word] = word.replace(\r\n      /-([a-z])/g,\r\n      (_, char) => char.toUpperCase()\r\n    )\r\n  }\r\n  return cache[word]\r\n}\r\n","export default value => typeof value === 'function'\r\n","/* eslint no-eq-null: 0 eqeqeq: [2, \"smart\"] */\r\nimport { camelCase, isFunction, isObject } from './utils'\r\n\r\nconst X_PROXY_PROPS = '_VBS_PP_'\r\nconst X_DATA_PROCESSED = '_VBS_DP_'\r\nconst X_BEFORE_CREATE_PROCESSED = '_VBS_BCP_'\r\nconst X_LAST_VALUES_FROM_PARENT = '_VBS_LVFP_'\r\nconst X_LAST_VALUES_FROM_CHILD = '_VBS_LVFC_'\r\nconst X_PROXY_CHANGED_BY_PARENT = '_VBS_PCBP_'\r\nconst X_PROP_CHANGED_BY_PARENT = 0\r\nconst X_PROP_CHANGED_BY_CHILD = 1\r\nconst X_WATCH_PROP = 0\r\nconst X_WATCH_PROXY = 1\r\n\r\nexport default ({\r\n  prop = 'value',\r\n  event = 'input'\r\n} = {}) => ({\r\n  model: { prop, event },\r\n\r\n  data() {\r\n    const ctx = this.$options\r\n\r\n    if (this[X_DATA_PROCESSED] || !ctx[X_PROXY_PROPS]) return\r\n\r\n    this[X_DATA_PROCESSED] = true\r\n    const proxyProps = ctx[X_PROXY_PROPS]\r\n\r\n    return proxyProps.reduce((data, proxyPropName) => {\r\n      data[proxyPropName] = null\r\n      return data\r\n    }, {})\r\n  },\r\n\r\n  beforeCreate() {\r\n    const ctx = this.$options\r\n\r\n    if (this[X_BEFORE_CREATE_PROCESSED] || !ctx.props) return\r\n\r\n    this[X_BEFORE_CREATE_PROCESSED] = true\r\n    ctx[X_PROXY_PROPS] = []\r\n    this[X_LAST_VALUES_FROM_PARENT] = {}\r\n    this[X_LAST_VALUES_FROM_CHILD] = {}\r\n    ctx.methods = ctx.methods || {}\r\n    ctx.watch = ctx.watch || {}\r\n\r\n    Object.keys(ctx.props).forEach(propName => {\r\n      const { sync: isSync } = ctx.props[propName]\r\n\r\n      const isModel = prop === propName\r\n\r\n      if (!isModel && !isSync) return\r\n\r\n      const PropName = camelCase(`-${propName}`)\r\n      const proxy = `local${PropName}`\r\n      const syncMethod = `sync${PropName}`\r\n      const directSyncMethod = `sync${PropName}Directly`\r\n      const transformMethod = `transform${PropName}`\r\n      const watchMethod = `_VBS_W_${propName}_`\r\n      const onPropChange = `on${PropName}Change`\r\n      const onProxyChange = `onLocal${PropName}Change`\r\n\r\n      ctx[X_PROXY_PROPS].push(proxy)\r\n\r\n      ctx.methods[directSyncMethod] = function (newValue, oldValue, propChangedBy) {\r\n        if (oldValue !== newValue) {\r\n          if (\r\n            propChangedBy === X_PROP_CHANGED_BY_PARENT &&\r\n            newValue !== this[X_LAST_VALUES_FROM_CHILD][propName] &&\r\n            newValue !== this[proxy]\r\n          ) {\r\n            this[X_PROXY_CHANGED_BY_PARENT] = true\r\n            this[proxy] = newValue\r\n          }\r\n          if (\r\n            propChangedBy === X_PROP_CHANGED_BY_CHILD &&\r\n            newValue !== this[X_LAST_VALUES_FROM_PARENT][propName]\r\n          ) {\r\n            if (isModel) {\r\n              this.$emit(event, newValue, oldValue)\r\n            }\r\n            if (isSync) {\r\n              this.$emit(`update:${propName}`, newValue, oldValue)\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      ctx.methods[syncMethod] = function (newValue) {\r\n        // Compatible to Event value\r\n        if (newValue instanceof Event && newValue.target && newValue.target.value) {\r\n          newValue = newValue.target.value\r\n        }\r\n        this[proxy] = newValue\r\n      }\r\n\r\n      ctx.methods[watchMethod] = function (newValue, oldValue, from) {\r\n        if (newValue !== oldValue) {\r\n          const fromProp = from === X_WATCH_PROP\r\n          const LAST_VALUES_FROM = fromProp ? X_LAST_VALUES_FROM_PARENT : X_LAST_VALUES_FROM_CHILD\r\n          const CHANGED_BY = fromProp ? X_PROP_CHANGED_BY_PARENT : X_PROP_CHANGED_BY_CHILD\r\n          this[LAST_VALUES_FROM][propName] = newValue\r\n          if (isFunction(this[transformMethod])) {\r\n            const transformedValue = this[transformMethod](\r\n              { oldValue, newValue },\r\n              fromProp\r\n            )\r\n            if (isObject(transformedValue)) {\r\n              oldValue = transformedValue.oldValue\r\n              newValue = transformedValue.newValue\r\n            }\r\n          }\r\n          if (newValue !== oldValue) {\r\n            if (fromProp) {\r\n              if (isFunction(this[onPropChange])) {\r\n                this[onPropChange](newValue, oldValue)\r\n              }\r\n            } else {\r\n              if (isFunction(this[onProxyChange])) {\r\n                this[onProxyChange](newValue, oldValue)\r\n              }\r\n            }\r\n            this[directSyncMethod](\r\n              newValue,\r\n              oldValue,\r\n              CHANGED_BY\r\n            )\r\n          }\r\n        }\r\n      }\r\n\r\n      ctx.watch[propName] = {\r\n        immediate: true,\r\n        handler(newValue, oldValue) {\r\n          this[watchMethod](newValue, oldValue, X_WATCH_PROP)\r\n        }\r\n      }\r\n\r\n      ctx.watch[proxy] = {\r\n        immediate: true,\r\n        handler(newValue, oldValue) {\r\n          if (this[X_PROXY_CHANGED_BY_PARENT]) {\r\n            this[X_PROXY_CHANGED_BY_PARENT] = false\r\n            return\r\n          }\r\n          this[watchMethod](newValue, oldValue, X_WATCH_PROXY)\r\n        }\r\n      }\r\n    })\r\n  }\r\n})\r\n","export default value => value !== null && typeof value === 'object'\r\n"],"names":["const","cache","Object","create","value","ref","ctx","this","$options","reduce","data","proxyPropName","props","methods","watch","keys","forEach","propName","isSync","isModel","prop","word","PropName","replace","_","char","toUpperCase","proxy","syncMethod","directSyncMethod","transformMethod","watchMethod","onPropChange","onProxyChange","push","newValue","oldValue","propChangedBy","$emit","event","Event","target","from","fromProp","CHANGED_BY","isFunction","transformedValue"],"mappings":";;;;;yLAAAA,IAAMC,EAAQC,OAAOC,OAAO,iBCAbC,SAA0B,mBAAVA,mBCcfC,kDACP,6CACC,qDAKAC,EAAMC,KAAKC,aAEbD,KAAA,UAA2BD,EAAA,qBAE/B,UAAyB,EACNA,EAAA,SAEDG,gBAAQC,EAAMC,YACzBA,GAAiB,KACfD,oCAKHJ,EAAMC,KAAKC,UAEbD,KAAA,WAAoCD,EAAIM,aAE5C,WAAkC,IAClC,iBACA,mBACA,gBACIC,QAAUP,EAAIO,cACdC,MAAQR,EAAIQ,iBAETC,KAAKT,EAAIM,OAAOI,iBAAQC,OACfC,EAAWZ,EAAIM,MAAMK,QAE7BE,EAAUC,IAASH,KAEpBE,GAAYD,OFjDRG,EEmDHC,GFlDLrB,EADQoB,MEmDsBJ,OFjD3BI,GAAQA,EAAKE,QACjB,qBACCC,EAAGC,UAASA,EAAKC,iBAGfzB,EAAMoB,IE6CHM,EAAS,QAAOL,EAChBM,EAAc,OAAMN,EACpBO,EAAoB,OAAMP,aAC1BQ,EAAmB,YAAWR,EAC9BS,EAAe,UAASd,MACxBe,EAAgB,KAAIV,WACpBW,EAAiB,UAASX,aAEhC,SAAmBY,KAAKP,KAEpBd,QAAQgB,GAAoB,SAAUM,EAAUC,EAAUC,GACxDD,IAAaD,IAxDQ,IA0DrBE,GACAF,IAAa5B,KAAA,WAA+BU,IAC5CkB,IAAa5B,KAAKoB,UAElB,YAAkC,OAC7BA,GAASQ,GA9DM,IAiEpBE,GACAF,IAAa5B,KAAA,WAAgCU,KAEzCE,QACGmB,MAAMC,EAAOJ,EAAUC,GAE1BlB,QACGoB,gBAAgBrB,EAAYkB,EAAUC,QAM/CvB,QAAQe,GAAc,SAAUO,GAE9BA,aAAoBK,OAASL,EAASM,QAAUN,EAASM,OAAOrC,UACvD+B,EAASM,OAAOrC,YAExBuB,GAASQ,KAGZtB,QAAQkB,GAAe,SAAUI,EAAUC,EAAUM,MACnDP,IAAaC,EAAU,KACnBO,EAvFK,IAuFMD,EAEXE,EAAaD,EA3FI,EACD,UAyFGA,EA7FD,aACD,cA8FA1B,GAAYkB,EAC/BU,EAAWtC,KAAKuB,IAAmB,KAC/BgB,EAAmBvC,KAAKuB,2BAE5Ba,GCzGoB,QAAnBvC,ED2GU0C,IC3GkC,iBAAV1C,MD4GxB0C,EAAiBV,WACjBU,EAAiBX,UAG5BA,IAAaC,IACXO,EACEE,EAAWtC,KAAKyB,UACbA,GAAcG,EAAUC,GAG3BS,EAAWtC,KAAK0B,UACbA,GAAeE,EAAUC,QAG7BP,GACHM,EACAC,EACAQ,QC7HCxC,KDmILU,MAAMG,eACG,mBACHkB,EAAUC,QACXL,GAAaI,EAAUC,EA3HjB,OA+HXtB,MAAMa,eACG,mBACHQ,EAAUC,GACZ7B,KAAA,gBACF,YAAkC,OAG/BwB,GAAaI,EAAUC,EArIhB"}