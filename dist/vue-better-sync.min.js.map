{"version":3,"file":"vue-better-sync.min.js","sources":["../src/utils/camel-case.js","../src/index.js"],"sourcesContent":["const cache = Object.create(null)\r\n\r\nexport default word => {\r\n  if (!cache[word]) {\r\n    cache[word] = word.replace(\r\n      /-([a-z])/g,\r\n      (_, char) => char.toUpperCase()\r\n    )\r\n  }\r\n  return cache[word]\r\n}\r\n","import { camelCase } from './utils'\r\n\r\nconst X_DATA_PROPS = '_DATA_PROPS_'\r\nconst X_PROP_CHANGED_BY_PARENT = 1\r\nconst X_PROP_CHANGED_BY_PROXY = 2\r\n\r\nexport default ({\r\n  prop = 'value',\r\n  event = 'input'\r\n} = {}) => ({\r\n  model: { prop, event },\r\n\r\n  data() {\r\n    const props = this.$options[X_DATA_PROPS] || {}\r\n    return Object.keys(props).reduce((data, proxy) => {\r\n      data[proxy] = this[props[proxy]]\r\n      return data\r\n    }, {})\r\n  },\r\n\r\n  beforeCreate() {\r\n    const ctx = this.$options\r\n\r\n    if (!ctx.props) return\r\n\r\n    ctx[X_DATA_PROPS] = {}\r\n    ctx.methods = ctx.methods || {}\r\n    ctx.watch = ctx.watch || {}\r\n\r\n    Object.keys(ctx.props).forEach(propName => {\r\n      const { sync: isSync } = ctx.props[propName]\r\n\r\n      const isModel = prop === propName\r\n\r\n      if (!isModel && !isSync) return\r\n\r\n      const PropName = camelCase(`-${propName}`)\r\n      const proxy = `actual${PropName}`\r\n      const syncMethod = `sync${PropName}`\r\n      const directSyncMethod = `sync${PropName}Directly`\r\n\r\n      ctx[X_DATA_PROPS][proxy] = propName\r\n\r\n      ctx.methods[directSyncMethod] = function (newValue, oldValue, propChangedBy) {\r\n        if (oldValue !== newValue) {\r\n          if (propChangedBy !== X_PROP_CHANGED_BY_PROXY) {\r\n            this[proxy] = newValue\r\n          }\r\n          if (propChangedBy !== X_PROP_CHANGED_BY_PARENT) {\r\n            if (isModel) {\r\n              this.$emit(event, newValue, oldValue)\r\n            }\r\n            if (isSync) {\r\n              this.$emit(`update:${propName}`, newValue, oldValue)\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      ctx.methods[syncMethod] = function (newValue) {\r\n        this[proxy] = newValue\r\n      }\r\n\r\n      ctx.watch[propName] = function (newValue, oldValue) {\r\n        if (newValue !== oldValue) {\r\n          this[directSyncMethod](newValue, oldValue, X_PROP_CHANGED_BY_PARENT)\r\n        }\r\n      }\r\n\r\n      ctx.watch[proxy] = function (newValue, oldValue) {\r\n        // now: this[proxy] === newValue\r\n        if (newValue !== oldValue) {\r\n          // so: `this[proxy] = newValue` will not trigger watcher\r\n          this[directSyncMethod](newValue, oldValue, X_PROP_CHANGED_BY_PROXY)\r\n        }\r\n      }\r\n    })\r\n  }\r\n})\r\n"],"names":["const","cache","Object","create","ref","props","this","$options","keys","reduce","data","proxy","ctx","methods","watch","forEach","propName","isSync","isModel","prop","word","PropName","replace","_","char","toUpperCase","syncMethod","directSyncMethod","newValue","oldValue","propChangedBy","$emit","event"],"mappings":";;;;;yLAAAA,IAAMC,EAAQC,OAAOC,OAAO,sBCMZC,kDACP,6CACC,4DAKAC,EAAQC,KAAKC,SAAL,wBACPL,OAAOM,KAAKH,GAAOI,gBAAQC,EAAMC,YACjCA,GAASL,EAAKD,EAAMM,IAClBD,oCAKHE,EAAMN,KAAKC,SAEZK,EAAIP,UAET,kBACIQ,QAAUD,EAAIC,cACdC,MAAQF,EAAIE,iBAETN,KAAKI,EAAIP,OAAOU,iBAAQC,OACfC,EAAWL,EAAIP,MAAMW,QAE7BE,EAAUC,IAASH,KAEpBE,GAAYD,ODhCRG,ECkCHC,GDjCLpB,EADQmB,MCkCsBJ,ODhC3BI,GAAQA,EAAKE,QACjB,qBACCC,EAAGC,UAASA,EAAKC,iBAGfxB,EAAMmB,IC4BHT,EAAS,SAAQU,EACjBK,EAAc,OAAML,EACpBM,EAAoB,OAAMN,eAEhC,aAAkBV,GAASK,IAEvBH,QAAQc,GAAoB,SAAUC,EAAUC,EAAUC,GACxDD,IAAaD,IAxCO,IAyClBE,SACGnB,GAASiB,GA3CO,IA6CnBE,IACEZ,QACGa,MAAMC,EAAOJ,EAAUC,GAE1BZ,QACGc,gBAAgBf,EAAYY,EAAUC,QAM/ChB,QAAQa,GAAc,SAAUE,QAC7BjB,GAASiB,KAGZd,MAAME,GAAY,SAAUY,EAAUC,GACpCD,IAAaC,QACVF,GAAkBC,EAAUC,EA9DV,MAkEvBf,MAAMH,GAAS,SAAUiB,EAAUC,GAEjCD,IAAaC,QAEVF,GAAkBC,EAAUC,EArEX"}