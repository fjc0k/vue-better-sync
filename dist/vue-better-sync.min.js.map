{"version":3,"file":"vue-better-sync.min.js","sources":["../src/utils/camel-case.js","../src/index.js"],"sourcesContent":["const cache = Object.create(null)\r\n\r\nexport default word => {\r\n  if (!cache[word]) {\r\n    cache[word] = word.replace(\r\n      /-([a-z])/g,\r\n      (_, char) => char.toUpperCase()\r\n    )\r\n  }\r\n  return cache[word]\r\n}\r\n","import { camelCase } from './utils'\r\n\r\nconst X_PROXY_PROPS = '_VBS_PROXY_PROPS_'\r\nconst X_DATA_PROCESSED = '_VBS_DATA_PROCESSED_'\r\nconst X_BEFORE_CREATE_PROCESSED = '_VBS_BEFORE_CREATE_PROCESSED_'\r\nconst X_DESYNC = '_VBS_DESYNC_'\r\nconst X_PROP_CHANGED_BY_PARENT = 1\r\nconst X_PROP_CHANGED_BY_PROXY = 2\r\n\r\nexport default ({\r\n  prop = 'value',\r\n  event = 'input'\r\n} = {}) => ({\r\n  model: { prop, event },\r\n\r\n  data() {\r\n    const ctx = this.$options\r\n\r\n    if (this[X_DATA_PROCESSED] || !ctx[X_PROXY_PROPS]) return\r\n\r\n    this[X_DATA_PROCESSED] = true\r\n    const proxyProps = ctx[X_PROXY_PROPS]\r\n\r\n    return proxyProps.reduce((data, proxyPropName) => {\r\n      data[proxyPropName] = null\r\n      return data\r\n    }, {})\r\n  },\r\n\r\n  beforeCreate() {\r\n    const ctx = this.$options\r\n\r\n    if (this[X_BEFORE_CREATE_PROCESSED] || !ctx.props) return\r\n\r\n    this[X_BEFORE_CREATE_PROCESSED] = true\r\n    ctx[X_PROXY_PROPS] = []\r\n    ctx.methods = ctx.methods || {}\r\n    ctx.watch = ctx.watch || {}\r\n\r\n    Object.keys(ctx.props).forEach(propName => {\r\n      const { sync: isSync } = ctx.props[propName]\r\n\r\n      const isModel = prop === propName\r\n\r\n      if (!isModel && !isSync) return\r\n\r\n      const PropName = camelCase(`-${propName}`)\r\n      const proxy = `actual${PropName}`\r\n      const syncMethod = `sync${PropName}`\r\n      const directSyncMethod = `sync${PropName}Directly`\r\n      const beforeSyncMethod = `beforeSync${PropName}`\r\n      const beforeProxyMethod = `beforeProxy${PropName}`\r\n\r\n      ctx[X_PROXY_PROPS].push(proxy)\r\n\r\n      ctx.methods[directSyncMethod] = function (newValue, oldValue, propChangedBy) {\r\n        if (oldValue !== newValue) {\r\n          if (propChangedBy !== X_PROP_CHANGED_BY_PROXY) {\r\n            this[proxy] = newValue\r\n          }\r\n          if (propChangedBy !== X_PROP_CHANGED_BY_PARENT) {\r\n            if (isModel) {\r\n              this.$emit(event, newValue, oldValue)\r\n            }\r\n            if (isSync) {\r\n              this.$emit(`update:${propName}`, newValue, oldValue)\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      ctx.methods[syncMethod] = function (newValue) {\r\n        // Compatible to Event value\r\n        if (newValue instanceof Event && newValue.target && newValue.target.value) {\r\n          newValue = newValue.target.value\r\n        }\r\n\r\n        this[proxy] = newValue\r\n      }\r\n\r\n      ctx.watch[propName] = {\r\n        immediate: true,\r\n        handler(newValue, oldValue) {\r\n          if (newValue !== oldValue) {\r\n            const confirm = (_newValue = newValue) => {\r\n              if (_newValue !== newValue) {\r\n                this[X_DESYNC] = true\r\n              }\r\n              this[directSyncMethod](_newValue, oldValue, X_PROP_CHANGED_BY_PARENT)\r\n            }\r\n            const cancel = () => {}\r\n            if (typeof this[beforeProxyMethod] === 'function') {\r\n              this[beforeProxyMethod](oldValue, newValue, confirm, cancel)\r\n            } else {\r\n              confirm()\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      ctx.watch[proxy] = function (newValue, oldValue) {\r\n        if (this[X_DESYNC]) {\r\n          this[X_DESYNC] = false\r\n          return\r\n        }\r\n\r\n        // now: this[proxy] === newValue\r\n        if (newValue !== oldValue && newValue !== this[propName]) {\r\n          // so: `this[proxy] = newValue` will not trigger watcher\r\n          const confirm = (_newValue = newValue) => {\r\n            this[directSyncMethod](_newValue, oldValue, X_PROP_CHANGED_BY_PROXY)\r\n          }\r\n          const cancel = () => {\r\n            this[proxy] = oldValue\r\n          }\r\n          if (typeof this[beforeSyncMethod] === 'function') {\r\n            this[beforeSyncMethod](oldValue, newValue, confirm, cancel)\r\n          } else {\r\n            confirm()\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n})\r\n"],"names":["const","cache","Object","create","ref","ctx","this","$options","reduce","data","proxyPropName","props","methods","watch","keys","forEach","propName","isSync","isModel","prop","word","PropName","replace","_","char","toUpperCase","proxy","syncMethod","directSyncMethod","beforeSyncMethod","beforeProxyMethod","push","newValue","oldValue","propChangedBy","$emit","event","Event","target","value","confirm","_newValue"],"mappings":";;;;;yLAAAA,IAAMC,EAAQC,OAAOC,OAAO,sBCSZC,kDACP,6CACC,qDAKAC,EAAMC,KAAKC,aAEbD,KAAA,sBAA2BD,EAAA,8BAE/B,sBAAyB,EACNA,EAAA,kBAEDG,gBAAQC,EAAMC,YACzBA,GAAiB,KACfD,oCAKHJ,EAAMC,KAAKC,UAEbD,KAAA,+BAAoCD,EAAIM,aAE5C,+BAAkC,IAClC,uBACIC,QAAUP,EAAIO,cACdC,MAAQR,EAAIQ,iBAETC,KAAKT,EAAIM,OAAOI,iBAAQC,OACfC,EAAWZ,EAAIM,MAAMK,QAE7BE,EAAUC,IAASH,KAEpBE,GAAYD,OD1CRG,EC4CHC,GD3CLpB,EADQmB,MC4CsBJ,OD1C3BI,GAAQA,EAAKE,QACjB,qBACCC,EAAGC,UAASA,EAAKC,iBAGfxB,EAAMmB,ICsCHM,EAAS,SAAQL,EACjBM,EAAc,OAAMN,EACpBO,EAAoB,OAAMP,aAC1BQ,EAAoB,aAAYR,EAChCS,EAAqB,cAAaT,IAExC,kBAAmBU,KAAKL,KAEpBd,QAAQgB,GAAoB,SAAUI,EAAUC,EAAUC,GACxDD,IAAaD,IAjDO,IAkDlBE,SACGR,GAASM,GApDO,IAsDnBE,IACEhB,QACGiB,MAAMC,EAAOJ,EAAUC,GAE1BhB,QACGkB,gBAAgBnB,EAAYgB,EAAUC,QAM/CrB,QAAQe,GAAc,SAAUK,GAE9BA,aAAoBK,OAASL,EAASM,QAAUN,EAASM,OAAOC,UACvDP,EAASM,OAAOC,YAGxBb,GAASM,KAGZnB,MAAMG,eACG,mBACHgB,EAAUC,iBACZD,IAAaC,EAAU,KACnBO,WAAWC,kBAAYT,GACvBS,IAAcT,MAChB,cAAiB,KAEdJ,GAAkBa,EAAWR,EAlFf,IAqFkB,mBAA5B3B,KAAKwB,QACTA,GAAmBG,EAAUD,EAAUQ,yBAQhD3B,MAAMa,GAAS,SAAUM,EAAUC,iBACjC3B,KAAA,kBACF,cAAiB,UAKf0B,IAAaC,GAAYD,IAAa1B,KAAKU,GAAW,KAElDwB,WAAWC,kBAAYT,KACtBJ,GAAkBa,EAAWR,EAvGd,IA4GgB,mBAA3B3B,KAAKuB,QACTA,GAAkBI,EAAUD,EAAUQ,eAHtCd,GAASO"}